<net.rptools.maptool.model.MacroButtonProperties>
  <macroUUID>2784c78c-9106-43d5-a6a5-74998278dc8f</macroUUID>
  <saveLocation>Token</saveLocation>
  <index>58</index>
  <colorKey>purple</colorKey>
  <hotKey>None</hotKey>
  <command>[h: basicToon = getProperty ("dndb_BasicToon")]
[h, if (encode (basicToon) == ""), code: {
	[h: error = "You must initialize with DNDBeyond first"]
	[h: abort (input ( " junk | | " + error + " | LABEL | TEXT=fals"))]
	[h: return (0, error)]
}]

[h: CLASS_VAR_SUFFIX = "_spendHitDice"]
[h: classes = json.get (basicToon, "classes")]

&lt;!-- example input string --&gt;
&lt;!-- Barbarian-spendHitDice | 0,1,2,3,4 | Spend Barbarian Hit Dice | List --&gt;
&lt;!-- Fighter-spendHitDice  | 0,1 | Spend Fighter Hit Dice | List --&gt;

&lt;!-- So the challenge here is that are variable name is dynamic. I think I can use the eval --&gt;
&lt;!-- function to help me out here --&gt;

&lt;!-- Build the input string, using ## as a line delimiter --&gt;
[h: inputStr = ""]
[h: classVars = ""]
[h, foreach (class, classes), code: {
	[h: className = json.get (class, "className")]
	[h: level = json.get (class, "level")]
	[h: hitDiceUsed = json.get (class, "hitDiceUsed")]
	[h: hitDice = json.get (class, "hitDice")]
	[h: totalAvailable = level - hitDiceUsed + 1]
	[h: hitDiceChoices = ""]
	[h, for (i, 0, totalAvailable): hitDiceChoices = hitDiceChoices + "," + string (i)]
	[h: hitDiceChoices = substring (hitDiceChoices, 1)]
	[h: classVar = className + CLASS_VAR_SUFFIX]
	[h: inputStr = inputStr + "## " + classVar + " | " + hitDiceChoices + 
			" | Spend " + className + " Hit Dice | List | "]
	[h: classVars = json.append (classVars, json.set ("", "classVar", classVar, 
												"hitDice", hitDice,
												"className", className))]
}]
&lt;!-- prune the leading ## --&gt;
[h: inputStr = substring (inputStr, 3)]
[h: input (inputStr)]
[h: conBonus = getProperty ("Constitution Bonus")]
[h: total = 0]
[h: output = ""]
[h, foreach (classVar, classVars), code: {
	[h: output = output + "&lt;br&gt;" + json.get (classVar, "className") + ":&lt;br&gt;"]
	[h: limit = eval (json.get (classVar, "classVar"))]
	[h: dice = json.get (classVar, "hitDice")]
	[h, for (i, 0, limit), code: {
		[h: expression = "1d" + dice + " + " + conBonus]
		[h: roll = eval (expression)]
		[h: output = output + "&amp;nbsp;&amp;nbsp;&amp;nbsp;" + expression + " = " + roll + "&lt;br&gt;"]
		[h: total = total + roll]
	}]
}]
[r: output]
[r: "&lt;br&gt;Total healed: " + total]</command>
  <label>Spend Hit Dice</label>
  <group>Token</group>
  <sortby>30</sortby>
  <autoExecute>true</autoExecute>
  <includeLabel>false</includeLabel>
  <applyToTokens>true</applyToTokens>
  <fontColorKey>white</fontColorKey>
  <fontSize>1.05em</fontSize>
  <minWidth/>
  <maxWidth/>
  <allowPlayerEdits>false</allowPlayerEdits>
  <toolTip>Note: This doesn't actually spend the character's hit dice. It only rolls for the player as if they spent those dice. The player will need to update DNDBeyond and mark the hit dice spent there. Until the next refresh, this macro will always show the same number of hit dice available to spend.</toolTip>
  <displayHotKey>true</displayHotKey>
  <commonMacro>false</commonMacro>
  <compareGroup>true</compareGroup>
  <compareSortPrefix>true</compareSortPrefix>
  <compareCommand>true</compareCommand>
  <compareIncludeLabel>true</compareIncludeLabel>
  <compareAutoExecute>true</compareAutoExecute>
  <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
</net.rptools.maptool.model.MacroButtonProperties>
