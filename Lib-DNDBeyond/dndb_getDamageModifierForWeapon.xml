<net.rptools.maptool.model.MacroButtonProperties>
  <macroUUID>42b9cde7-616e-4e20-87d9-82c5f2b69225</macroUUID>
  <saveLocation>Token</saveLocation>
  <index>20</index>
  <colorKey>default</colorKey>
  <hotKey>None</hotKey>
  <command>&lt;!-- Callers must pass in the character json themselves. No getter methods should shoulder the --&gt;
&lt;!-- responsibility of calling dndb_getCharJSON --&gt;
&lt;!-- Requires two parameters: toon json and weapon object --&gt;
[h: toon = arg(0)]
[h: weapon = arg (1)]

[h: bonusType = "damage"]

&lt;!-- Calculates attack bonus, including that which comes from the toon's attributes --&gt;
[h: attributes = dndb_getAbilities (toon)]
[h: strBonus = round (math.floor((json.get (attributes, "str") - 10 ) / 2))]
[h: dexBonus = round (math.floor((json.get (attributes, "dex") - 10 ) / 2))]
[h: finesseBonus = max (strBonus, dexBonus)]

[h, if (json.get (weapon, "attackType") == "Melee"): abilityBonus = strBonus; abilityBonus = dexBonus]
[h: finesse = json.path.read (weapon, "properties.[?(@.name == 'Finesse')]")]
[h, if (json.length (finesse) &gt; 0): abilityBonus = finesseBonus]

[h: totalBonus = abilityBonus]

[h: classModifiers = json.path.read (toon, "data.modifiers.class..[?(@.type == '" + bonusType + "')]")]

&lt;!-- WIP: we only know of some class abilities to parse --&gt;
[r, foreach (classModifier, classModifiers), code : {
	&lt;!-- Assume qualified and eliminate from there --&gt;

	[h: qualified = 1]
	[h: bonus = json.get (classModifier, "value")]
	[h: qualified = dndb_isWeaponModifierApplicable (classModifier, weapon)]

	[h, if (qualified &gt; 0), code: {
		[h: totalBonus = totalBonus + bonus]
		[h: log.debug (json.indent (classModifier))]
	}]
}]

&lt;!-- no qualification checks on Race, yet --&gt;
[h: raceDamageModifiers = json.path.read (toon, "data.modifiers.race..[?(@.type == '" + bonusType + "')]")]
[h, foreach (raceDamageModifier, raceDamageModifiers), code: {
	[h: bonus = json.get (raceDamageModifier, "value"]
	[h: totalDamageBonus = totalDamageBonus + bonus]
}]

&lt;!-- apply item bonuses only if equipped --&gt;
[h: itemModifiers = json.path.read (toon, "data.modifiers.item..[?(@.type == '" + bonusType + "')]")]
&lt;!-- for ech itemDamageMod, get the componentId. Find the item in inventory with the matching id and check equipped --&gt;
[h, foreach (itemModifier, itemModifiers), code: {
	&lt;!-- itemModifier may have attack specific sub-types --&gt;
	[h: qualified = dndb_isWeaponModifierApplicable (itemModifier, weapon)]
	[h, if (qualified &gt; 0): log.debug (json.indent (itemModifier))]
	[h: componentId = json.get (itemModifier, "componentId")]
	[h: items = json.path.read (toon, "data.inventory..[?(@.definition.id == '" + componentId + "')]")]
	&lt;!-- should only be one --&gt;
	[h: item = json.get (items, 0)]
	[h: bonus = json.get (itemModifier, "value")]
	[h: equipped = json.get (item, "equipped")]
	[h, if (equipped != "true"): qualified = 0]

	[h, if (qualified &gt; 0): totalBonus = totalBonus + bonus]
}]

&lt;!-- finally, bonuses on the weapon itself --&gt;
[h: bonus = json.get (weapon, "bonus")]
[h: totalBonus = totalBonus + bonus]

[h: macro.return = totalBonus]
</command>
  <label>dndb_getDamageModifierForWeapon</label>
  <group>Utility</group>
  <sortby/>
  <autoExecute>true</autoExecute>
  <includeLabel>false</includeLabel>
  <applyToTokens>false</applyToTokens>
  <fontColorKey>black</fontColorKey>
  <fontSize>1.00em</fontSize>
  <minWidth/>
  <maxWidth/>
  <allowPlayerEdits>false</allowPlayerEdits>
  <toolTip/>
  <displayHotKey>true</displayHotKey>
  <commonMacro>false</commonMacro>
  <compareGroup>true</compareGroup>
  <compareSortPrefix>true</compareSortPrefix>
  <compareCommand>true</compareCommand>
  <compareIncludeLabel>true</compareIncludeLabel>
  <compareAutoExecute>true</compareAutoExecute>
  <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
</net.rptools.maptool.model.MacroButtonProperties>
