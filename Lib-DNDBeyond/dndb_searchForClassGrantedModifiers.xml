<net.rptools.maptool.model.MacroButtonProperties>
  <macroUUID>51e0dbdc-cff1-489c-a9c6-65f09f57ee3a</macroUUID>
  <saveLocation>Token</saveLocation>
  <index>39</index>
  <colorKey>default</colorKey>
  <hotKey>None</hotKey>
  <command>&lt;!-- Instead of the usual arg array, try a json obj --&gt;
[h: filterObj = arg(0)]
[h: toon = json.get (filterObj, "object")]
[h: property = json.get (filterObj, "property")]

&lt;!-- filterObj is only filter terms. Well provide our own object and stuff property back in as needed --&gt;
[h: filterObj = json.remove (filterObj, "object")]
[h: filterObj = json.remove (filterObj, "property")]

[h: resultArry = ""]

&lt;!-- Anything that is: --&gt;
	&lt;!-- granted by a class feature with availableToMultiClass = true --&gt;
	&lt;!-- or granted by a class feature from the starting class --&gt;
	&lt;!-- Each modifier references a componentId. That correlates to data.classes.classFeature.id --&gt;
[h: log.debug ("Searching class")]
[h: searchObject = json.path.read (toon, "data.modifiers.class")]
&lt;!-- property-less search. I need the objecct for reference --&gt;
[h: subSearchConfig = json.set (filterObj, "object", searchObject)]
[h: modifiers = dndb_searchJsonObject (subSearchConfig)]
[h: startingClassDefinition = json.get (json.path.read (toon, "data.classes[*].[?(@.isStartingClass == true)]['definition']"), 0)]
[h: log.debug ("startingClass: " + json.get(startingClassDefinition, "id"))]
[h, foreach (modifier, modifiers), code: {
	[h: qualified = 0]
	[h: multiClassAllowed = json.get (modifier, "availableToMulticlass")]
	[h, if (multiClassAllowed == "true"): qualified = 1]
	[h: componentId = json.get (modifier, "componentId")]
	[h: isGrantedByClass = json.path.read (startingClassDefinition, "classFeatures[*].[?(@.id == " + componentId + ")]['name']")]
	[h: log.debug ("isGrantedByClass: " + isGrantedByClass)]
	[h, if (json.length (isGrantedByClass) &gt; 0): qualified = 1]
	&lt;!-- before appending, apply the result property --&gt;
	[h, if (property != ""): modifier = json.get (modifier, property)]
	[h, if (qualified &gt; 0): resultArry = json.append (resultArry, modifier)]
}]

[h: macro.return = resultArry]</command>
  <label>dndb_searchForClassGrantedModifiers</label>
  <group>Utility</group>
  <sortby/>
  <autoExecute>true</autoExecute>
  <includeLabel>false</includeLabel>
  <applyToTokens>false</applyToTokens>
  <fontColorKey>black</fontColorKey>
  <fontSize>1.00em</fontSize>
  <minWidth/>
  <maxWidth/>
  <allowPlayerEdits>false</allowPlayerEdits>
  <toolTip>Searches the data.modifier.classes object for all modifiers granted by classes, restricting those not grantable via multi-classing.

arg(0) = 
{
  "object": "toon",
  "property": "fixedValue",
  "subType": "ability-checks",
  "type": "expertise"
}

Within the JSON, the "object" parameter is required. It must be a the full character object.

"property" is a reserved parameter that indicates the values to return. If "property" is not provided, the full entity is returned for each match.

All other key-value pairs are used as search terms.</toolTip>
  <displayHotKey>true</displayHotKey>
  <commonMacro>false</commonMacro>
  <compareGroup>true</compareGroup>
  <compareSortPrefix>true</compareSortPrefix>
  <compareCommand>true</compareCommand>
  <compareIncludeLabel>true</compareIncludeLabel>
  <compareAutoExecute>true</compareAutoExecute>
  <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
</net.rptools.maptool.model.MacroButtonProperties>
