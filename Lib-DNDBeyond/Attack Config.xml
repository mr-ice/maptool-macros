<net.rptools.maptool.model.MacroButtonProperties>
  <macroUUID>be8ee24c-b4f1-4f5e-93fa-62f3da336ffd</macroUUID>
  <saveLocation>Token</saveLocation>
  <index>56</index>
  <colorKey>green</colorKey>
  <hotKey>None</hotKey>
  <command>
&lt;!-- Constants --&gt;
[h: ATTACK_JSON = "attackJSON"]
[h: NAME = "name"]
[h: ATK_BONUS = "atkBonus"]
[h: DMG_BONUS = "dmgBonus"]
[h: DMG_DIE = "dmgDie"]
[h: DMG_DICE = "dmgDice"]
[h: CRIT_BONUS_DICE = "critBonusDice"]
[h: DMG_TYPE = "dmgType"]
[h: DMG_BONUS_EXPR = "dmgBonusExpr"]
[h: NEW_ATTACK = "New Attack"]

&lt;!-- Read attack JSON and prompt for selection --&gt;
[h, if (!isPropertyEmpty (ATTACK_JSON)), code: {
	&lt;!-- Property is populated. Fetch JSON data --&gt;
    [h: attackJson = getProperty(ATTACK_JSON)]
}; {
	&lt;!-- Property is empty, use blank object --&gt;
	[h: attackJson = ""]
}]

[h: arrLen = json.length(attackJson)]
[h, if (arrLen &lt; 1), code: {
	[h: selectedAttack = NEW_ATTACK]
}; {
    [h: attackList = NEW_ATTACK]  
    [h, foreach (attack, attackJson): attackList = json.append(attackList, json.get(attack, NAME))]
    [h: abort( input( "selectedAttack | " + json.toList(attackList) + " | Select Attack | list | value=string"))]
}]

&lt;!-- Attack selected! Fetch the JSON for the selected attack. If "new" was selected, nothing will be found --&gt;
[h: cfgAttack = json.fromStrProp(NAME + "=" + NEW_ATTACK)]
[h, foreach (attack, attackJson), code: {
	[h: attackName = json.get(attack, NAME)]
	[h, if (attackName == selectedAttack), code: {
		[cfgAttack = attack]
	}; {0}]
}]

&lt;!-- transfer json properties to input vars --&gt;
[h: inputAtkBonus = json.get(cfgAttack, ATK_BONUS)]
[h: inputDmgBonus = json.get(cfgAttack, DMG_BONUS)]
[h: inputDmgDie = json.get(cfgAttack, DMG_DIE)]
[h: inputDmgDice = json.get(cfgAttack, DMG_DICE)]
[h: inputName = json.get(cfgAttack, NAME)]
[h: inputCritBonus = json.get(cfgAttack, CRIT_BONUS_DICE)]
[h: inputDmgType = json.get(cfgAttack, DMG_TYPE)]
[h: inputDmgBonusExpr = json.get(cfgAttack, DMG_BONUS_EXPR)]

&lt;!-- Prompt the input --&gt;
[h: abort( input( "inputName | " + inputName + " | Attack Name | text",
    "inputAtkBonus | " + inputAtkBonus + " | Attack Bonus | text",
    "inputDmgBonus | " + inputDmgBonus + " | Damage Bonus | text",
    "inputDmgDie | " + inputDmgDie + " | Damage Die | text",
    "inputDmgDice | " + inputDmgDice + " | Number of Damage Dice | text",
    "inputDmgType | " + inputDmgType + " | Damage Type | text",
    "inputCritBonus | " + inputCritBonus + " | Extra Critical Dice | text",
    "inputDmgBonusExpr | " + inputDmgBonusExpr + " | Bonus Damage Expression | text",
    "inputDeleteAttack | | Delete Attack | check"))]

&lt;!-- Convert the input into a new JSON object --&gt;
[h: cfgAttack = json.set(cfgAttack, 
    NAME, inputName,
    ATK_BONUS, inputAtkBonus,
    DMG_BONUS, inputDmgBonus,
    DMG_DIE, inputDmgDie,
    DMG_DICE, inputDmgDice,
    CRIT_BONUS_DICE, inputCritBonus,
    DMG_TYPE, inputDmgType,
    DMG_BONUS_EXPR, inputDmgBonusExpr)]

[h, if (NEW_ATTACK == selectedAttack), code: {
    &lt;!-- If you added a new attack, just tack it into attackJson --&gt;
    [h: newAttackJson = json.append(attackJson, cfgAttack)]
}; {
    &lt;!-- But if you modifed and existing attack, iterate through the attackJson and replace it --&gt;
    [h: newAttackJson = ""]
    [h, foreach (attack, attackJson), code: {
        [h: attackName = json.get(attack, NAME)]
        [h: attack = if (attackName == selectedAttack, cfgAttack, attack)]
        [h: newAttackJson = if (inputDeleteAttack == 1 &amp;&amp; selectedAttack == json.get(attack, NAME), newAttackJson, json.append(newAttackJson, attack))]
    }]
}]
[h: setProperty(ATTACK_JSON, newAttackJson)]</command>
  <label>Attack Config</label>
  <group>Token</group>
  <sortby>2</sortby>
  <autoExecute>true</autoExecute>
  <includeLabel>false</includeLabel>
  <applyToTokens>true</applyToTokens>
  <fontColorKey>black</fontColorKey>
  <fontSize>1.05em</fontSize>
  <minWidth/>
  <maxWidth/>
  <allowPlayerEdits>false</allowPlayerEdits>
  <toolTip>Used to configure attacks. Should be executed at least once before Make Attack.
While this can only configure one attack per execution, bulk configuration is
made possible via Set AttackJSON.</toolTip>
  <displayHotKey>false</displayHotKey>
  <commonMacro>false</commonMacro>
  <compareGroup>true</compareGroup>
  <compareSortPrefix>true</compareSortPrefix>
  <compareCommand>true</compareCommand>
  <compareIncludeLabel>true</compareIncludeLabel>
  <compareAutoExecute>true</compareAutoExecute>
  <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
</net.rptools.maptool.model.MacroButtonProperties>
